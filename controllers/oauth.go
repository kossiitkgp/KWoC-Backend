// Handler function for routes
package controllers

import (
	"net/http"

	"github.com/kossiitkgp/kwoc-backend/v2/middleware"
	"github.com/kossiitkgp/kwoc-backend/v2/utils"

	"github.com/kossiitkgp/kwoc-backend/v2/models"
)

type OAuthReqBodyFields struct {
	// Code generated by Github OAuth
	Code string `json:"code"`
	// `mentor` or `student`
	Type string `json:"type"`
}

type OAuthResBodyFields struct {
	Username string `json:"username"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	College  string `json:"college"`
	// `mentor` or `student`
	Type string `json:"type"`
	// Whether the user has newly registered or was registered before
	IsNewUser bool `json:"is_new_user"`
	// The generated JWT string for the user
	Jwt string `json:"jwt"`
}

const OAUTH_TYPE_STUDENT string = "student"
const OAUTH_TYPE_MENTOR string = "mentor"
const OAUTH_TYPE_ORGANISER string = "organiser"

// OAuth godoc
//
//	@Summary		OAuth Authentication
//	@Description	Authenticates a user throught Github OAuth.
//	@Accept			json
//	@Produce		json
//	@Param			request	body		OAuthReqBodyFields	true	"Fields required for authentication."
//	@Success		200		{object}	OAuthResBodyFields	"Succesfully authenticated."
//	@Failure		400		{object}	utils.HTTPMessage	"Error decoding JSON body. | Empty body parameters."
//	@Failure		500		{object}	utils.HTTPMessage	"Error getting OAuth access token. | Error getting OAuth user info. | Could not get username from the Github API. | Error generating a JWT string."
//
//	@Router			/oauth [post]
func OAuth(w http.ResponseWriter, r *http.Request) {
	app := r.Context().Value(middleware.APP_CTX_KEY).(*middleware.App)
	db := app.Db

	var reqFields = OAuthReqBodyFields{}
	err := utils.DecodeJSONBody(r, &reqFields)
	if err != nil {
		utils.LogErrAndRespond(r, w, err, "Error decoding JSON body.", http.StatusBadRequest)
		return
	}

	if reqFields.Code == "" || reqFields.Type == "" {
		utils.LogWarnAndRespond(r, w, "Empty body parameters.", http.StatusBadRequest)
		return
	}

	// Get a Github OAuth access token
	accessToken, err := utils.GetOauthAccessToken(reqFields.Code)
	if err != nil {
		utils.LogErrAndRespond(r, w, err, "Error getting OAuth access token.", http.StatusInternalServerError)
		return
	}

	// Get the user's information from the Github API
	userInfo, err := utils.GetOauthUserInfo(accessToken)
	if err != nil {
		utils.LogErrAndRespond(r, w, err, "Error getting OAuth user info.", http.StatusInternalServerError)
		return
	}

	if userInfo.Username == "" {
		utils.LogWarnAndRespond(r, w, "Could not get username from the Github API.", http.StatusInternalServerError)
		return
	}

	// Check if the user is a organiser

	isOrganiser := utils.IsUserExecutive(accessToken, userInfo.Username)
	if isOrganiser {

		jwtString, err := utils.GenerateLoginJwtString(utils.LoginJwtFields{
			Username: userInfo.Username,
			UserType: OAUTH_TYPE_ORGANISER,
		})

		if err != nil {
			utils.LogErrAndRespond(r, w, err, "Error generating a JWT string.", http.StatusInternalServerError)
			return
		}
		resFields := OAuthResBodyFields{
			Username:  userInfo.Username,
			Name:      userInfo.Name,
			Email:     userInfo.Email,
			College:   "IIT Kharagpur",
			Type:      OAUTH_TYPE_ORGANISER,
			IsNewUser: false,
			Jwt:       jwtString,
		}

		utils.RespondWithJson(r, w, resFields)
		return
	}

	// Check if the user has already registered
	var isNewUser bool = true
	var userType string = reqFields.Type

	college := ""
	student := models.Student{}
	db.
		Table("students").
		Where("username = ?", userInfo.Username).
		First(&student)

	if student.Username == userInfo.Username {
		isNewUser = false
		userType = "student"
		userInfo.Email = student.Email
		userInfo.Name = student.Name
		college = student.College
	}

	mentor := models.Mentor{}
	db.
		Table("mentors").
		Where("username = ?", userInfo.Username).
		First(&mentor)

	if mentor.Username == userInfo.Username {
		isNewUser = false
		userInfo.Email = mentor.Email
		userInfo.Name = mentor.Name
		userType = "mentor"
	}

	// Generate a JWT string for the user
	jwtString, err := utils.GenerateLoginJwtString(utils.LoginJwtFields{
		Username: userInfo.Username,
		UserType: userType,
	})
	if err != nil {
		utils.LogErrAndRespond(r, w, err, "Error generating a JWT string.", http.StatusInternalServerError)
		return
	}

	resFields := OAuthResBodyFields{
		Username:  userInfo.Username,
		Name:      userInfo.Name,
		Email:     userInfo.Email,
		College:   college,
		Type:      userType,
		IsNewUser: isNewUser,
		Jwt:       jwtString,
	}

	utils.RespondWithJson(r, w, resFields)
}

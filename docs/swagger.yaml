definitions:
  controllers.OAuthReqBodyFields:
    properties:
      code:
        description: Code generated by Github OAuth
        type: string
      type:
        description: '`mentor` or `student`'
        type: string
    type: object
  controllers.OAuthResBodyFields:
    properties:
      college:
        type: string
      email:
        type: string
      is_new_user:
        description: Whether the user has newly registered or was registered before
        type: boolean
      jwt:
        description: The generated JWT string for the user
        type: string
      name:
        type: string
      type:
        description: '`mentor` or `student`'
        type: string
      username:
        type: string
    type: object
  controllers.ProfileResBodyFields:
    properties:
      email:
        type: string
      name:
        type: string
      type:
        description: '`mentor` or `student`'
        type: string
      username:
        type: string
    type: object
  controllers.ProjectDashboard:
    properties:
      name:
        type: string
      repo_link:
        type: string
    type: object
  controllers.RegisterStudentReqFields:
    properties:
      college:
        type: string
      email:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  controllers.StudentBlogLinkReqFields:
    properties:
      blog_link:
        type: string
      username:
        type: string
    type: object
  controllers.StudentDashboard:
    properties:
      college:
        type: string
      commit_count:
        type: integer
      languages_used:
        items:
          type: string
        type: array
      lines_added:
        type: integer
      lines_removed:
        type: integer
      name:
        type: string
      passed_end_evals:
        type: boolean
      passed_mid_evals:
        type: boolean
      projects_worked:
        items:
          $ref: '#/definitions/controllers.ProjectDashboard'
        type: array
      pull_count:
        type: integer
      username:
        type: string
    type: object
  utils.HTTPMessage:
    properties:
      message:
        type: string
      status_code:
        description: HTTP Response Status StatusCode
        type: integer
    type: object
info:
  contact: {}
  description: KWoC Backend API written in go
  title: KWoC Backend
  version: 2.0.0
paths:
  /healthcheck/:
    get:
      consumes:
      - text/plain
      description: The HealthCheck endpoint examines the operational status of the
        server and the associated database.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Could not ping the database
          schema:
            type: string
      summary: Checks the health status of the server and database.
  /healthcheck/ping:
    get:
      consumes:
      - text/plain
      description: Ping responds with "pong" and returns the latency
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: ping
  /oauth:
    post:
      consumes:
      - application/json
      description: Authenticates a user throught Github OAuth.
      parameters:
      - description: Fields required for authentication.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.OAuthReqBodyFields'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully authenticated.
          schema:
            $ref: '#/definitions/controllers.OAuthResBodyFields'
        "400":
          description: Error decoding JSON body. | Empty body parameters.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error getting OAuth access token. | Error getting OAuth user
            info. | Could not get username from the Github API. | Error generating
            a JWT string.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      summary: OAuth Authentication
  /profile:
    get:
      consumes:
      - text/plain
      description: Fetches the user's profile from the JWT, if it is valid. If invalid,
        returns an error.
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully authenticated.
          schema:
            $ref: '#/definitions/controllers.ProfileResBodyFields'
        "400":
          description: User is not registered.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: JWT session token invalid.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error parsing JWT string.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetches user profile
  /student/bloglink/:
    post:
      consumes:
      - application/json
      description: |-
        submit a blog link for a student
        requires login
      parameters:
      - description: Fields required for student bloglink
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.StudentBlogLinkReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: BlogLink successfully updated.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "400":
          description: Student 'username' does not exist.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: Login username and given username do not match.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error updating BlogLink for 'username'.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Submit blog link
  /student/dashboard/:
    get:
      consumes:
      - text/plain
      description: Fetches the required details for the student dashboard
      produces:
      - application/json
      responses:
        "200":
          description: Student registration successful.
          schema:
            $ref: '#/definitions/controllers.StudentDashboard'
        "400":
          description: Student `username` does not exists.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Database Error fetching student with username `username`
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetches the student dashboard
  /student/form/:
    post:
      consumes:
      - application/json
      description: Register a new student with the provided details.
      parameters:
      - description: Fields required for student registeration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterStudentReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: Student registration successful.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "400":
          description: Student 'username' already exists.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: Login username and given username do not match.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Register a student
securityDefinitions:
  JWT:
    description: Must include the Bearer key in the header with the JWT string for
      login.
    in: Header
    name: Bearer
    type: apiKey
swagger: "2.0"

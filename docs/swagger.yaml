definitions:
  controllers.Mentor:
    properties:
      name:
        type: string
      username:
        type: string
    type: object
  controllers.MentorDashboard:
    properties:
      email:
        type: string
      name:
        type: string
      projects:
        items:
          $ref: '#/definitions/controllers.ProjectInfo'
        type: array
      students:
        items:
          $ref: '#/definitions/controllers.StudentInfo'
        type: array
      username:
        type: string
    type: object
  controllers.OAuthReqBodyFields:
    properties:
      code:
        description: Code generated by Github OAuth
        type: string
      type:
        description: '`mentor` or `student`'
        type: string
    type: object
  controllers.OAuthResBodyFields:
    properties:
      college:
        type: string
      email:
        type: string
      is_new_user:
        description: Whether the user has newly registered or was registered before
        type: boolean
      jwt:
        description: The generated JWT string for the user
        type: string
      name:
        type: string
      type:
        description: '`mentor` or `student`'
        type: string
      username:
        type: string
    type: object
  controllers.OverallStats:
    properties:
      gen_time:
        type: integer
      total_commit_count:
        type: integer
      total_lines_added:
        type: integer
      total_lines_removed:
        type: integer
      total_pull_count:
        type: integer
    type: object
  controllers.ProfileResBodyFields:
    properties:
      email:
        type: string
      name:
        type: string
      type:
        description: '`mentor` or `student`'
        type: string
      username:
        type: string
    type: object
  controllers.Project:
    properties:
      comm_channel:
        type: string
      description:
        type: string
      id:
        type: integer
      mentor:
        $ref: '#/definitions/controllers.Mentor'
      name:
        type: string
      readme_link:
        type: string
      repo_link:
        type: string
      secondary_mentor:
        $ref: '#/definitions/controllers.Mentor'
      tags:
        items:
          type: string
        type: array
    type: object
  controllers.ProjectDashboard:
    properties:
      name:
        type: string
      repo_link:
        type: string
    type: object
  controllers.ProjectInfo:
    properties:
      commit_count:
        type: integer
      description:
        type: string
      id:
        type: integer
      lines_added:
        type: integer
      lines_removed:
        type: integer
      mentor:
        $ref: '#/definitions/controllers.Mentor'
      name:
        type: string
      project_status:
        type: boolean
      pull_count:
        type: integer
      pulls:
        items:
          type: string
        type: array
      readme_link:
        type: string
      repo_link:
        type: string
      secondary_mentor:
        $ref: '#/definitions/controllers.Mentor'
      status_remark:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  controllers.ProjectStats:
    properties:
      commit_count:
        type: integer
      lines_added:
        type: integer
      lines_removed:
        type: integer
      name:
        type: string
      pull_count:
        type: integer
      repo_link:
        type: string
    type: object
  controllers.RegisterProjectReqFields:
    properties:
      comm_channel:
        description: Link to a communication channel/platform
        type: string
      description:
        description: Description for the project
        type: string
      mentor_username:
        description: Mentor's username
        type: string
      name:
        description: Name of the project
        type: string
      readme_link:
        description: Link to the project's README file
        type: string
      repo_link:
        description: Link to the repository of the project
        type: string
      secondary_mentor_username:
        description: Secondary mentor's username
        type: string
      tags:
        description: List of tags for the project
        items:
          type: string
        type: array
    type: object
  controllers.RegisterStudentReqFields:
    properties:
      college:
        type: string
      email:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  controllers.StudentBlogLinkReqFields:
    properties:
      blog_link:
        type: string
      username:
        type: string
    type: object
  controllers.StudentBriefStats:
    properties:
      commit_count:
        type: integer
      lines_added:
        type: integer
      lines_removed:
        type: integer
      name:
        type: string
      pull_count:
        type: integer
      username:
        type: string
    type: object
  controllers.StudentDashboard:
    properties:
      college:
        type: string
      commit_count:
        type: integer
      languages_used:
        items:
          type: string
        type: array
      lines_added:
        type: integer
      lines_removed:
        type: integer
      name:
        type: string
      passed_end_evals:
        type: boolean
      passed_mid_evals:
        type: boolean
      projects_worked:
        items:
          $ref: '#/definitions/controllers.ProjectDashboard'
        type: array
      pull_count:
        type: integer
      pulls:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  controllers.StudentInfo:
    properties:
      name:
        type: string
      username:
        type: string
    type: object
  controllers.UpdateMentorReqFields:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  controllers.UpdateProjectReqFields:
    properties:
      comm_channel:
        description: Link to a communication channel/platform
        type: string
      description:
        description: Description for the project
        type: string
      id:
        description: Id of the project in the database (required)
        type: integer
      mentor_username:
        description: Mentor's username
        type: string
      name:
        description: Name of the project
        type: string
      readme_link:
        description: Link to the project's README file
        type: string
      repo_link:
        description: Link to the repository of the project
        type: string
      secondary_mentor_username:
        description: Secondary mentor's username (if updated)
        type: string
      tags:
        description: List of tags for the project
        items:
          type: string
        type: array
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Mentor:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  utils.HTTPMessage:
    properties:
      message:
        type: string
      status_code:
        description: HTTP Response Status StatusCode
        type: integer
    type: object
info:
  contact: {}
  description: KWoC Backend API written in go
  title: KWoC Backend
  version: 2.0.0
paths:
  /api:
    get:
      consumes:
      - text/plain
      description: Returns a simple string to check if the api is up and running
      produces:
      - text/plain
      responses:
        "200":
          description: Hello from KOSS Backend!
          schema:
            type: string
      summary: Checks api health
  /healthcheck/:
    get:
      consumes:
      - text/plain
      description: The HealthCheck endpoint examines the operational status of the
        server and the associated database.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Could not ping the database
          schema:
            type: string
      summary: Checks the health status of the server and database.
  /healthcheck/ping:
    get:
      consumes:
      - text/plain
      description: Ping responds with "pong" and returns the latency
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: ping
  /mentor/:
    get:
      consumes:
      - text/plain
      description: Get mentor details for logged in mentor
      produces:
      - application/json
      responses:
        "200":
          description: Mentor details fetched successfuly.
          schema:
            $ref: '#/definitions/models.Mentor'
        "400":
          description: Mentor `username` does not exists.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetch Mentor Details
  /mentor/dashboard/:
    get:
      consumes:
      - text/plain
      description: Fetches the required details for the mentor dashboard
      produces:
      - application/json
      responses:
        "200":
          description: Mentor dashboard details fetched successfuly.
          schema:
            $ref: '#/definitions/controllers.MentorDashboard'
        "400":
          description: Mentor `username` does not exists.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Database Error fetching mentor with username `username`
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetches the mentor dashboard
  /mentor/form:
    put:
      consumes:
      - application/json
      description: Update mentor details for logged in mentor
      parameters:
      - description: Fields required for Mentor update.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateMentorReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully updated mentor details.
          schema:
            items:
              type: string
            type: array
        "400":
          description: 'Invalid Details: Could not update mentor details'
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Update Mentor Details
  /oauth:
    post:
      consumes:
      - application/json
      description: Authenticates a user throught Github OAuth.
      parameters:
      - description: Fields required for authentication.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.OAuthReqBodyFields'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully authenticated.
          schema:
            $ref: '#/definitions/controllers.OAuthResBodyFields'
        "400":
          description: Error decoding JSON body. | Empty body parameters.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error getting OAuth access token. | Error getting OAuth user
            info. | Could not get username from the Github API. | Error generating
            a JWT string.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      summary: OAuth Authentication
  /profile:
    get:
      consumes:
      - text/plain
      description: Fetches the user's profile from the JWT, if it is valid. If invalid,
        returns an error.
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully authenticated.
          schema:
            $ref: '#/definitions/controllers.ProfileResBodyFields'
        "400":
          description: User is not registered.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: JWT session token invalid.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error parsing JWT string.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetches user profile
  /project/:
    get:
      consumes:
      - text/plain
      description: Fetches the public details for all the Projects
      produces:
      - application/json
      responses:
        "200":
          description: Projects fetched successfully.
          schema:
            items:
              $ref: '#/definitions/controllers.Project'
            type: array
        "500":
          description: Error fetching projects from the database.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      summary: Fetches all Projects
    post:
      consumes:
      - application/json
      description: Register a new project with the provided details.
      parameters:
      - description: Fields required for project registeration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterProjectReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "400":
          description: 'Error: Secondary mentor `secondary_mentor` cannot be same
            as primary mentor.'
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: Login username and mentor username do not match.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Register a Project
    put:
      consumes:
      - application/json
      description: Update project details for the provided project ID.
      parameters:
      - description: Fields required for Project update.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateProjectReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: Project successfully updated.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "400":
          description: 'Error: Secondary mentor `secondary_mentor_username` cannot
            be same as primary mentor.'
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: Login username and mentor username do not match.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error fetching secondary mentor `secondary_mentor_username`.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Update Project Details
  /project/{id}:
    get:
      consumes:
      - text/plain
      description: Fetches all the details for the Project with the provided ID provided
        the logged in user owns the project.
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Project fetched successfully.
          schema:
            $ref: '#/definitions/controllers.Project'
        "400":
          description: 'Error: Mentor `mentor` does not own the project with ID `id`.'
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error fetching project from the database.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetches Project Details
  /stats/overall/:
    get:
      consumes:
      - text/plain
      description: Fetches overall stats from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Fetched overall stats successfully.
          schema:
            items:
              $ref: '#/definitions/controllers.OverallStats'
            type: array
        "500":
          description: Error fetching stats from the database.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      summary: Fetches Overall Stats
  /stats/projects/:
    get:
      consumes:
      - text/plain
      description: Fetches all project stats from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Fetch project stats successfully.
          schema:
            items:
              $ref: '#/definitions/controllers.ProjectStats'
            type: array
        "500":
          description: Error fetching project stats from the database.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      summary: Fetches all Project Stats
  /stats/students/:
    get:
      consumes:
      - text/plain
      description: Fetches all student stats from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            items:
              $ref: '#/definitions/controllers.StudentBriefStats'
            type: array
        "500":
          description: Error fetching student stats from the database.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      summary: Fetches all Student Stats
  /student/bloglink/:
    post:
      consumes:
      - application/json
      description: |-
        submit a blog link for a student
        requires login
      parameters:
      - description: Fields required for student bloglink
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.StudentBlogLinkReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: BlogLink successfully updated.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "400":
          description: Student 'username' does not exist.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: Login username and given username do not match.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Error updating BlogLink for 'username'.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Submit blog link
  /student/dashboard/:
    get:
      consumes:
      - text/plain
      description: Fetches the required details for the student dashboard
      produces:
      - application/json
      responses:
        "200":
          description: Student registration successful.
          schema:
            $ref: '#/definitions/controllers.StudentDashboard'
        "400":
          description: Student `username` does not exists.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Database Error fetching student with username `username`
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Fetches the student dashboard
  /student/form/:
    post:
      consumes:
      - application/json
      description: Register a new student with the provided details.
      parameters:
      - description: Fields required for student registeration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterStudentReqFields'
      produces:
      - application/json
      responses:
        "200":
          description: Student registration successful.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "400":
          description: Student 'username' already exists.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "401":
          description: Login username and given username do not match.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/utils.HTTPMessage'
      security:
      - JWT: []
      summary: Register a student
securityDefinitions:
  JWT:
    description: Must include the Bearer key in the header with the JWT string for
      login.
    in: Header
    name: Bearer
    type: apiKey
swagger: "2.0"
